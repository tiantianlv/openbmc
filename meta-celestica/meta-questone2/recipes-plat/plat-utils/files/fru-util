#!/bin/bash
#
# Copyright 2018-present Celestica. All Rights Reserved.
#
# This program file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program in a file named COPYING; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

command=(
"psu psu_fru"
"sys sys_fru"
"fan fan_fru"
)

EEPROM_LINK_FILE="/tmp/eeprom"
SYSEEPROM_I2C_BUS=2
SYSEEPROM_I2C_ADDR=53

FAN_EEPROM_MAX=4
FAN1_EEPROM_I2C_BUS=16
FAN1_EEPROM_I2C_ADDR=50
FAN2_EEPROM_I2C_BUS=17
FAN2_EEPROM_I2C_ADDR=50
FAN3_EEPROM_I2C_BUS=19
FAN3_EEPROM_I2C_ADDR=50
FAN4_EEPROM_I2C_BUS=20
FAN4_EEPROM_I2C_ADDR=50

read_info() {
	echo `cat /sys/bus/i2c/devices/i2c-${1}/${1}-00${2}/${3} | head -n 1`
}

psu_present() {
	if [ $1 -eq 1  ]; then
		((val=$(read_info 0 0d psu_l_present)))
	else
		((val=$(read_info 0 0d psu_r_present)))
	fi
	if [ $val -eq 0 ]; then
		return 1
	else
		return 0
	fi
}

psu_status() {
	if [ $1 -eq 1  ]; then
		((val=$(read_info 0 0d psu_l_status)))
	else
		((val=$(read_info 0 0d psu_r_status)))
	fi
	if [ $val -eq 0 ]; then
		return 1
	else
		return 0
	fi
}

psu_info() {
	if [ "$1" == "1" ]; then
		echo "PSU1 FRU:"
		$(psu_present 1)
		if [ $? -eq 1 ]; then
			echo "Present: present"
		else
			echo "Present: not present"
			return 1
		fi
		$(psu_status 1)
		if [ $? -eq 0 ]; then
			echo "Status: OK"
		else
			echo "Status: not OK"
		fi
		echo "MFR ID:  $(read_info 6 50 mfr_id)"
		echo "Product Name: $(read_info 6 50 mfr_name)"
		echo "Serial Number: $(read_info 6 50 mfr_serial)"
		echo "Product Version: $(read_info 6 50 mfr_version)"
	elif [ "$1" == "2" ]; then
		echo -e "\nPSU2 FRU:"
		$(psu_present 2)
		if [ $? -eq 1 ]; then
			echo "Present: present"
		else
			echo "Present: not present"
			return 1
		fi
		$(psu_status 2)
		if [ $? -eq 0 ]; then
			echo "Status: OK"
		else
			echo "Status: not OK"
		fi
		echo "MFR ID:  $(read_info 6 51 mfr_id)"
		echo "Product Name: $(read_info 6 51 mfr_name)"
		echo "Serial Number: $(read_info 6 51 mfr_serial)"
		echo "Product Version: $(read_info 6 51 mfr_version)"
	else
		echo "Invalid PSU number"
	fi
}
psu_usage() {
	echo "option:"
	echo "-a    show all psu FRU"
	echo "-p <1/2>    show specific psu FRU"
}

fan_usage() {
	echo "option:"
	echo "<fanID> [arg]    get/set FAN FRU"
}

psu_fru() {
	if [ $# -lt 1 ]; then
		psu_usage
		return 1		
	fi
	while getopts "ap:" opt; do
		case $opt in
		a)
			psu_info 1
			psu_info 2
			;;
		p)
			psu_info $OPTARG
			;;
		\?)
			psu_usage
		esac
	done
}

sys_fru() {
	echo "System FRU:"
	if [ -L ${EEPROM_LINK_FILE} ]; then
		rm -rf ${EEPROM_LINK_FILE}
	fi
	ln -s /sys/bus/i2c/devices/i2c-${SYSEEPROM_I2C_BUS}/${SYSEEPROM_I2C_BUS}-00${SYSEEPROM_I2C_ADDR}/eeprom  ${EEPROM_LINK_FILE}
	syseeprom $@
}

fan_present() {
	((val=$(read_info 0 0d fan${i}_present)))
	if [ $val -eq 0 ]; then
		echo "Yes"
	else
		echo "No"
	fi
}

fan_fru() {
	if [ $# -lt 1 ] || [ $1 -lt 0 ] || [ $1 -gt ${FAN_EEPROM_MAX} ]; then
		fan_usage
		return 1
	fi
	i=$1
	echo "FAN${i} FRU:"
	if [ $# -eq 1 ] ; then
		echo "Present: $(fan_present $1)"
	fi
	i2c_bus=$((FAN${i}_EEPROM_I2C_BUS))
	i2c_addr=$((FAN${i}_EEPROM_I2C_ADDR))
	if [ -L ${EEPROM_LINK_FILE} ]; then
		rm -rf ${EEPROM_LINK_FILE}
	fi
	ln -s /sys/bus/i2c/devices/i2c-${i2c_bus}/${i2c_bus}-00${i2c_addr}/eeprom  ${EEPROM_LINK_FILE}
	shift
	syseeprom $@

}

if [ $# -lt 1 ]; then
	echo "Error: parameter must >= 1"
	echo "Support commands: "
	for i in "${command[@]}"; do
		s=($i)
		echo $s
	done
	exit 1
fi

for i in "${command[@]}"; do
	matched=0
	s=($i)
	for j in "${s[@]}"; do
		#echo $j
		if [ $matched -eq 1 ]; then
			shift
			$j $@
			exit 0
		fi
		if [ "$1" == "$j" ]; then
			matched=1
			continue
		else
			matched=0
			break;
		fi
	done
done

echo "Invalid parameter: $1"
exit 1
